diff --git a/cmd/mount_zfs/Makefile.am b/cmd/mount_zfs/Makefile.am
index e5f3d08..5c40ab6 100644
--- a/cmd/mount_zfs/Makefile.am
+++ b/cmd/mount_zfs/Makefile.am
@@ -19,4 +19,5 @@ mount_zfs_LDADD = \
 	$(top_builddir)/lib/libuutil/libuutil.la \
 	$(top_builddir)/lib/libzpool/libzpool.la \
 	$(top_builddir)/lib/libzfs/libzfs.la \
-	$(top_builddir)/lib/libzfs_core/libzfs_core.la
+	$(top_builddir)/lib/libzfs_core/libzfs_core.la \
+	$(TIRPC_LIBS)
diff --git a/cmd/mount_zfs/mount_zfs.c b/cmd/mount_zfs/mount_zfs.c
index 6cb23d1..cf92b86 100644
--- a/cmd/mount_zfs/mount_zfs.c
+++ b/cmd/mount_zfs/mount_zfs.c
@@ -31,6 +31,7 @@
 #include <sys/stat.h>
 #include <libzfs.h>
 #include <locale.h>
+#include <fcntl.h>
 
 libzfs_handle_t *g_zfs;
 
diff --git a/cmd/zdb/Makefile.am b/cmd/zdb/Makefile.am
index 854fbab..a177f4d 100644
--- a/cmd/zdb/Makefile.am
+++ b/cmd/zdb/Makefile.am
@@ -17,4 +17,4 @@ zdb_LDADD = \
 	$(top_builddir)/lib/libzfs/libzfs.la \
 	$(top_builddir)/lib/libzfs_core/libzfs_core.la
 
-zdb_LDADD += $(ZLIB)
+zdb_LDADD += $(ZLIB) $(TIRPC_LIBS)
diff --git a/cmd/zed/Makefile.am b/cmd/zed/Makefile.am
index f1404de..e67200f 100644
--- a/cmd/zed/Makefile.am
+++ b/cmd/zed/Makefile.am
@@ -26,7 +26,8 @@ zed_LDADD = \
 	$(top_builddir)/lib/libavl/libavl.la \
 	$(top_builddir)/lib/libnvpair/libnvpair.la \
 	$(top_builddir)/lib/libspl/libspl.la \
-	$(top_builddir)/lib/libzfs/libzfs.la
+	$(top_builddir)/lib/libzfs/libzfs.la \
+	$(TIRPC_LIBS)
 
 zedconfdir = $(sysconfdir)/zfs/zed.d
 
diff --git a/cmd/zfs/Makefile.am b/cmd/zfs/Makefile.am
index 08580c9..ed7d5d6 100644
--- a/cmd/zfs/Makefile.am
+++ b/cmd/zfs/Makefile.am
@@ -19,5 +19,5 @@ zfs_LDADD = \
 	$(top_builddir)/lib/libzfs/libzfs.la \
 	$(top_builddir)/lib/libzfs_core/libzfs_core.la
 
-zfs_LDADD += $(ZLIB)
+zfs_LDADD += $(ZLIB)  $(TIRPC_LIBS)
 zfs_LDFLAGS = -pthread
diff --git a/cmd/zhack/Makefile.am b/cmd/zhack/Makefile.am
index 922aef9..485ade9 100644
--- a/cmd/zhack/Makefile.am
+++ b/cmd/zhack/Makefile.am
@@ -16,4 +16,4 @@ zhack_LDADD = \
 	$(top_builddir)/lib/libzfs/libzfs.la \
 	$(top_builddir)/lib/libzfs_core/libzfs_core.la
 
-zhack_LDADD += $(ZLIB)
+zhack_LDADD += $(ZLIB) $(TIRPC_LIBS)
diff --git a/cmd/zinject/Makefile.am b/cmd/zinject/Makefile.am
index 4adef11..e889083 100644
--- a/cmd/zinject/Makefile.am
+++ b/cmd/zinject/Makefile.am
@@ -16,4 +16,5 @@ zinject_LDADD = \
 	$(top_builddir)/lib/libuutil/libuutil.la \
 	$(top_builddir)/lib/libzpool/libzpool.la \
 	$(top_builddir)/lib/libzfs/libzfs.la \
-	$(top_builddir)/lib/libzfs_core/libzfs_core.la
+	$(top_builddir)/lib/libzfs_core/libzfs_core.la \
+	$(TIRPC_LIBS)
diff --git a/cmd/zpool/Makefile.am b/cmd/zpool/Makefile.am
index a39a240..b15ca25 100644
--- a/cmd/zpool/Makefile.am
+++ b/cmd/zpool/Makefile.am
@@ -19,4 +19,4 @@ zpool_LDADD = \
 	$(top_builddir)/lib/libzpool/libzpool.la \
 	$(top_builddir)/lib/libzfs/libzfs.la \
 	$(top_builddir)/lib/libzfs_core/libzfs_core.la \
-	$(LIBBLKID)
+	$(LIBBLKID) $(TIRPC_LIBS)
diff --git a/cmd/zstreamdump/Makefile.am b/cmd/zstreamdump/Makefile.am
index d6c64f5..aedb909 100644
--- a/cmd/zstreamdump/Makefile.am
+++ b/cmd/zstreamdump/Makefile.am
@@ -16,4 +16,4 @@ zstreamdump_LDADD = \
 	$(top_builddir)/lib/libzfs/libzfs.la \
 	$(top_builddir)/lib/libzfs_core/libzfs_core.la
 
-zstreamdump_LDADD += $(ZLIB)
+zstreamdump_LDADD += $(ZLIB) $(TIRPC_LIBS)
diff --git a/cmd/ztest/Makefile.am b/cmd/ztest/Makefile.am
index a3cd834..8cccc17 100644
--- a/cmd/ztest/Makefile.am
+++ b/cmd/ztest/Makefile.am
@@ -18,4 +18,4 @@ ztest_LDADD = \
 	$(top_builddir)/lib/libzfs/libzfs.la \
 	$(top_builddir)/lib/libzfs_core/libzfs_core.la
 
-ztest_LDADD += -lm -ldl
+ztest_LDADD += -lm -ldl $(TIRPC_LIBS)
diff --git a/config/musl.m4 b/config/musl.m4
new file mode 100644
index 0000000..fb4d2c4
--- /dev/null
+++ b/config/musl.m4
@@ -0,0 +1,19 @@
+dnl
+dnl musl support
+dnl
+
+AC_DEFUN([ZFS_AC_CONFIG_USER_MUSL], [
+AH_TEMPLATE([HAVE_MUSL],
+  [Define to 1 if musl is being used as the C library])
+AH_TEMPLATE([HAVE_TIRPC],
+  [Define to 1 if libtirpc is being used as the RPC library])
+AC_ARG_ENABLE(musl,
+AC_HELP_STRING([--enable-musl], [compile with musl as the C library]),
+[if test x$enableval = xyes; then
+  AC_DEFINE([HAVE_MUSL], 1, [Define if you have musl])
+  PKG_CHECK_MODULES([TIRPC],[libtirpc])
+  AC_DEFINE([HAVE_TIRPC], 1, [Define if you have libtirpc])
+  AC_SUBST(TIRPC_CFLAGS)
+  AC_SUBST(TIRPC_LIBS)
+fi])
+])
diff --git a/config/user.m4 b/config/user.m4
index 3802437..db2e7c6 100644
--- a/config/user.m4
+++ b/config/user.m4
@@ -13,6 +13,7 @@ AC_DEFUN([ZFS_AC_CONFIG_USER], [
 	ZFS_AC_CONFIG_USER_LIBBLKID
 	ZFS_AC_CONFIG_USER_FRAME_LARGER_THAN
 	ZFS_AC_CONFIG_USER_RUNSTATEDIR
+	ZFS_AC_CONFIG_USER_MUSL
 dnl #
 dnl #	Checks for library functions
 	AC_CHECK_FUNCS([mlockall])
diff --git a/include/sys/zfs_context.h b/include/sys/zfs_context.h
index ec2a7de..dc0d521 100644
--- a/include/sys/zfs_context.h
+++ b/include/sys/zfs_context.h
@@ -118,6 +118,10 @@
 #include <sys/sunddi.h>
 #include <sys/debug.h>
 
+#if(!defined(RLIM64_INFINITY) && defined(HAVE_MUSL))
+#define RLIM64_INFINITY RLIM_INFINITY
+#endif 
+
 /*
  * Stack
  */
@@ -148,9 +152,9 @@ extern void dprintf_setup(int *argc, char **argv);
 extern void __dprintf(const char *file, const char *func,
     int line, const char *fmt, ...);
 extern void cmn_err(int, const char *, ...);
-extern void vcmn_err(int, const char *, __va_list);
+extern void vcmn_err(int, const char *, va_list);
 extern void panic(const char *, ...);
-extern void vpanic(const char *, __va_list);
+extern void vpanic(const char *, va_list);
 
 #define	fm_panic	panic
 
@@ -614,12 +618,12 @@ extern void delay(clock_t ticks);
 #define	minclsyspri	60
 #define	maxclsyspri	99
 
-#define	CPU_SEQID	(pthread_self() & (max_ncpus - 1))
+#define	CPU_SEQID	((uint_t)pthread_self() & (max_ncpus - 1))
 
 #define	kcred		NULL
 #define	CRED()		NULL
 
-#define	ptob(x)		((x) * PAGESIZE)
+#define	ptob(x)		((x) * SPL_PAGESIZE)
 
 extern uint64_t physmem;
 
diff --git a/lib/libnvpair/Makefile.am b/lib/libnvpair/Makefile.am
index 7a8f96a..8275f68 100644
--- a/lib/libnvpair/Makefile.am
+++ b/lib/libnvpair/Makefile.am
@@ -1,6 +1,6 @@
 include $(top_srcdir)/config/Rules.am
 
-AM_CFLAGS += $(DEBUG_STACKFLAGS) $(FRAME_LARGER_THAN)
+AM_CFLAGS += $(DEBUG_STACKFLAGS) $(FRAME_LARGER_THAN) $(TIRPC_CFLAGS)
 
 DEFAULT_INCLUDES += \
 	-I$(top_srcdir)/include \
diff --git a/lib/libspl/include/assert.h b/lib/libspl/include/assert.h
index d749d1e..0c0a234 100644
--- a/lib/libspl/include/assert.h
+++ b/lib/libspl/include/assert.h
@@ -61,7 +61,11 @@ __assert_c99(const char *expr, const char *file, int line, const char *func)
 #define	VERIFY	verify
 #define	ASSERT	assert
 
+#if(!defined(__assert) && defined(HAVE_MUSL))
+#define __assert(ex, file, line) __assert_fail(ex, file, line, __func__)
+#else
 extern void __assert(const char *, const char *, int);
+#endif
 
 /* BEGIN CSTYLED */
 #define	VERIFY3_IMPL(LEFT, OP, RIGHT, TYPE) do { \
diff --git a/lib/libspl/include/devid.h b/lib/libspl/include/devid.h
index 5406c33..2ef83ac 100644
--- a/lib/libspl/include/devid.h
+++ b/lib/libspl/include/devid.h
@@ -29,6 +29,12 @@
 
 #include <stdlib.h>
 
+#if (defined(HAVE_MUSL) && !defined(__DEFINED_dev_t))
+#define __NEED_dev_t
+#include <bits/alltypes.h>
+#endif
+
+
 typedef int ddi_devid_t;
 
 typedef struct devid_nmlist {
diff --git a/lib/libspl/include/rpc/xdr.h b/lib/libspl/include/rpc/xdr.h
index 99500d6..27e7590 100644
--- a/lib/libspl/include/rpc/xdr.h
+++ b/lib/libspl/include/rpc/xdr.h
@@ -60,6 +60,8 @@ typedef struct xdr_bytesrec {
 #define	XDR_RDMAGET	4
 #define	XDR_RDMASET	5
 
+#ifndef HAVE_TIRPC
 extern bool_t xdr_control(XDR *xdrs, int request, void *info);
+#endif
 
 #endif
diff --git a/lib/libspl/include/sys/param.h b/lib/libspl/include/sys/param.h
index 4090cef..de408e2 100644
--- a/lib/libspl/include/sys/param.h
+++ b/lib/libspl/include/sys/param.h
@@ -57,6 +57,6 @@
 #define	MAXUID		UINT32_MAX	/* max user id */
 #define	MAXPROJID	MAXUID		/* max project id */
 
-#define	PAGESIZE	(sysconf(_SC_PAGESIZE))
+#define	SPL_PAGESIZE	(sysconf(_SC_PAGESIZE))
 
 #endif
diff --git a/lib/libspl/include/sys/sysmacros.h b/lib/libspl/include/sys/sysmacros.h
index 698b0a7..1530177 100644
--- a/lib/libspl/include/sys/sysmacros.h
+++ b/lib/libspl/include/sys/sysmacros.h
@@ -66,11 +66,11 @@
  * that the result is correctly calculated based on the data type of (x),
  * which is passed in as the last argument, regardless of the data
  * type of the alignment.  For example, if (x) is of type uint64_t,
- * and we want to round it up to a page boundary using "PAGESIZE" as
+ * and we want to round it up to a page boundary using "SPL_PAGESIZE" as
  * the alignment, we can do either
- *      P2ROUNDUP(x, (uint64_t)PAGESIZE)
+ *      P2ROUNDUP(x, (uint64_t)SPL_PAGESIZE)
  * or
- *      P2ROUNDUP_TYPED(x, PAGESIZE, uint64_t)
+ *      P2ROUNDUP_TYPED(x, SPL_PAGESIZE, uint64_t)
  */
 #define	P2ALIGN_TYPED(x, align, type)		\
 	((type)(x) & -(type)(align))
diff --git a/lib/libspl/include/sys/types.h b/lib/libspl/include/sys/types.h
index bd34dec..08cd0b4 100644
--- a/lib/libspl/include/sys/types.h
+++ b/lib/libspl/include/sys/types.h
@@ -30,7 +30,6 @@
 #include <sys/isa_defs.h>
 #include <sys/feature_tests.h>
 #include_next <sys/types.h>
-#include <sys/param.h> /* for NBBY */
 #include <sys/types32.h>
 #include <sys/va_list.h>
 
@@ -96,4 +95,6 @@ typedef union {
 } lloff_t;
 #endif
 
+#include <sys/param.h> /* for NBBY */
+
 #endif
diff --git a/lib/libspl/include/sys/va_list.h b/lib/libspl/include/sys/va_list.h
index 04ad148..d452654 100644
--- a/lib/libspl/include/sys/va_list.h
+++ b/lib/libspl/include/sys/va_list.h
@@ -30,7 +30,11 @@
 #include <stdarg.h>
 
 #ifndef __va_list
+#ifdef __gnuc_va_list 
 typedef __gnuc_va_list __va_list;
+#else
+typedef void* __va_list;
+#endif
 #endif
 
 #endif
diff --git a/lib/libspl/timestamp.c b/lib/libspl/timestamp.c
index a4f4cf4..a177270 100644
--- a/lib/libspl/timestamp.c
+++ b/lib/libspl/timestamp.c
@@ -28,6 +28,10 @@
 #include <langinfo.h>
 #include "statcommon.h"
 
+#ifndef _DATE_FMT
+#define _DATE_FMT D_FMT
+#endif
+
 /*
  * Print timestamp as decimal reprentation of time_t value (-T u was specified)
  * or in date(1) format (-T d was specified).
diff --git a/lib/libspl/xdr.c b/lib/libspl/xdr.c
index 288a338..c8a6fe3 100644
--- a/lib/libspl/xdr.c
+++ b/lib/libspl/xdr.c
@@ -29,6 +29,7 @@
  * under license from the Regents of the University of California.
  */
 
+#ifndef HAVE_TIRPC
 #include <rpc/xdr.h>
 
 /*
@@ -76,3 +77,4 @@ xdr_control(XDR *xdrs, int request, void *info)
 	}
 	return (FALSE);
 }
+#endif
diff --git a/lib/libzpool/kernel.c b/lib/libzpool/kernel.c
index 05bbd06..3173ddc 100644
--- a/lib/libzpool/kernel.c
+++ b/lib/libzpool/kernel.c
@@ -180,7 +180,7 @@ zk_thread_create(caddr_t stk, size_t stksize, thread_func_t func, void *arg,
 
 	VERIFY3S(pthread_attr_init(&attr), ==, 0);
 	VERIFY3S(pthread_attr_setstacksize(&attr, stack), ==, 0);
-	VERIFY3S(pthread_attr_setguardsize(&attr, PAGESIZE), ==, 0);
+	VERIFY3S(pthread_attr_setguardsize(&attr, SPL_PAGESIZE), ==, 0);
 	VERIFY3S(pthread_attr_setdetachstate(&attr, detachstate), ==, 0);
 
 	VERIFY3S(pthread_create(&kt->t_tid, &attr, &zk_thread_helper, kt),
diff --git a/module/nvpair/nvpair.c b/module/nvpair/nvpair.c
index f5c3166..750556b 100644
--- a/module/nvpair/nvpair.c
+++ b/module/nvpair/nvpair.c
@@ -3251,8 +3251,12 @@ nvs_xdr_nvpair(nvstream_t *nvs, nvpair_t *nvp, size_t *size)
 			return (0);
 
 		/* sanity check the size parameter */
+#ifndef HAVE_TIRPC
 		if (!xdr_control(xdr, XDR_GET_BYTES_AVAIL, &bytesrec))
 			return (EFAULT);
+#else
+		xdr_control(xdr, XDR_GET_BYTES_AVAIL, &bytesrec);
+#endif
 
 		if (*size > NVS_XDR_MAX_LEN(bytesrec.xc_num_avail))
 			return (EFAULT);
diff --git a/module/zcommon/zfs_uio.c b/module/zcommon/zfs_uio.c
index 90376f2..4ffecf5 100644
--- a/module/zcommon/zfs_uio.c
+++ b/module/zcommon/zfs_uio.c
@@ -144,7 +144,7 @@ uio_prefaultpages(ssize_t n, struct uio *uio)
 				bcopy(p, &tmp, 1);
 				break;
 			}
-			incr = MIN(cnt, PAGESIZE);
+			incr = MIN(cnt, SPL_PAGESIZE);
 			p += incr;
 			cnt -= incr;
 		}
diff --git a/module/zfs/arc.c b/module/zfs/arc.c
index 387faaf..e2aa10d 100644
--- a/module/zfs/arc.c
+++ b/module/zfs/arc.c
@@ -135,6 +135,7 @@
 #include <sys/vdev.h>
 #include <sys/vdev_impl.h>
 #include <sys/dsl_pool.h>
+#include <linux/param.h>
 #ifdef _KERNEL
 #include <sys/vmsystm.h>
 #include <vm/anon.h>
@@ -1002,7 +1003,7 @@ buf_init(void)
 	 * with an average 64K block size.  The table will take up
 	 * totalmem*sizeof(void*)/64K (eg. 128KB/GB with 8-byte pointers).
 	 */
-	while (hsize * 65536 < physmem * PAGESIZE)
+	while (hsize * 65536 < physmem * SPL_PAGESIZE)
 		hsize <<= 1;
 retry:
 	buf_hash_table.ht_mask = hsize - 1;
@@ -2500,7 +2501,7 @@ arc_adapt_thread(void)
 
 		/* Allow the module options to be changed */
 		if (zfs_arc_max > 64 << 20 &&
-		    zfs_arc_max < physmem * PAGESIZE &&
+		    zfs_arc_max < physmem * SPL_PAGESIZE &&
 		    zfs_arc_max != arc_c_max)
 			arc_c_max = zfs_arc_max;
 
@@ -4087,7 +4088,7 @@ arc_init(void)
 	zfs_arc_min_prefetch_lifespan = 1 * hz;
 
 	/* Start out with 1/8 of all memory */
-	arc_c = physmem * PAGESIZE / 8;
+	arc_c = physmem * SPL_PAGESIZE / 8;
 
 #ifdef _KERNEL
 	/*
@@ -4113,7 +4114,7 @@ arc_init(void)
 	 * Allow the tunables to override our calculations if they are
 	 * reasonable (ie. over 64MB)
 	 */
-	if (zfs_arc_max > 64<<20 && zfs_arc_max < physmem * PAGESIZE)
+	if (zfs_arc_max > 64<<20 && zfs_arc_max < physmem * SPL_PAGESIZE)
 		arc_c_max = zfs_arc_max;
 	if (zfs_arc_min > 0 && zfs_arc_min <= arc_c_max)
 		arc_c_min = zfs_arc_min;
@@ -4212,11 +4213,11 @@ arc_init(void)
 	 * zfs_dirty_data_max_max (default 25% of physical memory).
 	 */
 	if (zfs_dirty_data_max_max == 0)
-		zfs_dirty_data_max_max = physmem * PAGESIZE *
+		zfs_dirty_data_max_max = physmem * SPL_PAGESIZE *
 		    zfs_dirty_data_max_max_percent / 100;
 
 	if (zfs_dirty_data_max == 0) {
-		zfs_dirty_data_max = physmem * PAGESIZE *
+		zfs_dirty_data_max = physmem * SPL_PAGESIZE *
 		    zfs_dirty_data_max_percent / 100;
 		zfs_dirty_data_max = MIN(zfs_dirty_data_max,
 		    zfs_dirty_data_max_max);
diff --git a/module/zfs/dbuf.c b/module/zfs/dbuf.c
index 4f17506..ef5fac6 100644
--- a/module/zfs/dbuf.c
+++ b/module/zfs/dbuf.c
@@ -302,7 +302,7 @@ dbuf_init(void)
 	 * with an average 4K block size.  The table will take up
 	 * totalmem*sizeof(void*)/4K (i.e. 2MB/GB with 8-byte pointers).
 	 */
-	while (hsize * 4096 < physmem * PAGESIZE)
+	while (hsize * 4096 < physmem * SPL_PAGESIZE)
 		hsize <<= 1;
 
 retry:
diff --git a/module/zfs/zfs_vnops.c b/module/zfs/zfs_vnops.c
index 91f743a..d45aeda 100644
--- a/module/zfs/zfs_vnops.c
+++ b/module/zfs/zfs_vnops.c
@@ -364,7 +364,7 @@ update_pages(struct inode *ip, int64_t start, int len,
  * On Read:	We "read" preferentially from memory mapped pages,
  *		else we default from the dmu buffer.
  *
- * NOTE: We will always "break up" the IO into PAGESIZE uiomoves when
+ * NOTE: We will always "break up" the IO into SPL_PAGESIZE uiomoves when
  *	 the file is memory mapped.
  */
 static int
@@ -4118,11 +4118,11 @@ zfs_fillpage(struct inode *ip, struct page *pl[], int nr_pages)
 	 */
 	page_idx = 0;
 	cur_pp   = pl[0];
-	for (total = io_off + io_len; io_off < total; io_off += PAGESIZE) {
+	for (total = io_off + io_len; io_off < total; io_off += SPL_PAGESIZE) {
 		caddr_t va;
 
 		va = kmap(cur_pp);
-		err = dmu_read(os, zp->z_id, io_off, PAGESIZE, va,
+		err = dmu_read(os, zp->z_id, io_off, SPL_PAGESIZE, va,
 		    DMU_READ_PREFETCH);
 		kunmap(cur_pp);
 		if (err) {
diff --git a/module/zfs/zio.c b/module/zfs/zio.c
index 26c4989..d6357c5 100644
--- a/module/zfs/zio.c
+++ b/module/zfs/zio.c
@@ -133,13 +133,13 @@ zio_init(void)
 	zio_link_cache = kmem_cache_create("zio_link_cache",
 	    sizeof (zio_link_t), 0, NULL, NULL, NULL, NULL, NULL, 0);
 	zio_vdev_cache = kmem_cache_create("zio_vdev_cache", sizeof (vdev_io_t),
-	    PAGESIZE, NULL, NULL, NULL, NULL, NULL, 0);
+	    SPL_PAGESIZE, NULL, NULL, NULL, NULL, NULL, 0);
 
 	/*
 	 * For small buffers, we want a cache for each multiple of
 	 * SPA_MINBLOCKSIZE.  For medium-size buffers, we want a cache
 	 * for each quarter-power of 2.  For large buffers, we want
-	 * a cache for each multiple of PAGESIZE.
+	 * a cache for each multiple of SPL_PAGESIZE.
 	 */
 	for (c = 0; c < SPA_MAXBLOCKSIZE >> SPA_MINBLOCKSHIFT; c++) {
 		size_t size = (c + 1) << SPA_MINBLOCKSHIFT;
@@ -156,13 +156,13 @@ zio_init(void)
 		 * kernel when modifying a non-watched buffer that shares the
 		 * page with a watched buffer.
 		 */
-		if (arc_watch && !IS_P2ALIGNED(size, PAGESIZE))
+		if (arc_watch && !IS_P2ALIGNED(size, SPL_PAGESIZE))
 			continue;
 #endif
 		if (size <= 4 * SPA_MINBLOCKSIZE) {
 			align = SPA_MINBLOCKSIZE;
-		} else if (IS_P2ALIGNED(size, PAGESIZE)) {
-			align = PAGESIZE;
+		} else if (IS_P2ALIGNED(size, SPL_PAGESIZE)) {
+			align = SPL_PAGESIZE;
 		} else if (IS_P2ALIGNED(size, p2 >> 2)) {
 			align = p2 >> 2;
 		}
